#
# Docker Compose file for Openstad app
#

---
version: '3.1'
services:
  mysql:
    image: "mysql:5"
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_ROOT_DATABASE}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    expose:
      - "3306"
      - "33060"
    restart: unless-stopped
    ports:
      - "3310:3306"
    entrypoint:
      sh -c "
        echo 'CREATE DATABASE IF NOT EXISTS ${AUTH_DB_NAME}; CREATE DATABASE IF NOT EXISTS ${IMAGE_DB_NAME}; CREATE DATABASE IF NOT EXISTS ${API_DATABASE};' > /docker-entrypoint-initdb.d/init.sql;
        /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      "
    volumes:
      - database:/var/lib/mysql
    networks:
      - database

  #node image serve
  image:
    build: image
    environment:
      ENVIRONMENT: "development"
      PORT_API: "${IMAGE_PORT_API}"
      PORT_IMAGE_SERVER: "${IMAGE_PORT_STEAM}"
      APP_URL: "${IMAGE_APP_URL}"
      #needs to best to network name in depends_on of mysql
      DB_HOST: "${MYSQL_HOST}"
      DB_USER: "root"
      DB_PASSWORD: "${MYSQL_PASSWORD}"
      DB_NAME: "${IMAGE_DB_NAME}"
    volumes:
      - ./image/images:/app/images
    ports:
      - ${IMAGE_PORT_API}:${IMAGE_PORT_API}
    restart: unless-stopped
    networks:
      - database
    depends_on:
      - "mysql"

  auth:
    command: npm run dev
    build: auth
    environment:
      ENVIRONMENT: "development"
      PORT: "${AUTH_PORT}"
      APP_URL: "${AUTH_APP_URL}"
      #db values
      DB_NAME: "${AUTH_DB_NAME}"
      DB_USER: "root"
      DB_PASSWORD: "${MYSQL_PASSWORD}"
      DB_HOST: "${MYSQL_HOST}"
      #mail values
      MAIL_SERVER_URL: "${MAIL_TRANSPORT_SMTP_HOST}"
      MAIL_SERVER_PORT: "${MAIL_TRANSPORT_SMTP_PORT}"
      MAIL_SERVER_SECURE: "${MAIL_TRANSPORT_SMTP_REQUIRESSL}"
      MAIL_SERVER_PASSWORD: ${MAIL_TRANSPORT_SMTP_AUTH_PASS}"
      MAIL_SERVER_USER_NAME: "${MAIL_TRANSPORT_SMTP_AUTH_USER}"
      SESSION_SECRET: "${SESSION_SECRET}"
      EMAIL_ASSETS_URL: "${AUTH_EMAIL_ASSETS_URL}"
      # Set the from name and email from which emails will be send (for example: password forgot & login url)
      FROM_NAME: "${AUTH_MAIL_FROM_NAME}"
      FROM_EMAIL: "${AUTH_MAIL_FROM_MAIL}"
      COOKIE_SECURE_OFF: "${COOKIE_SECURE_OFF}"
    ports:
      - ${AUTH_PORT}:${AUTH_PORT}
    restart: unless-stopped
    volumes:
      - ./auth:/srv/openstad/
      - /srv/openstad/node_modules
      - /srv/openstad/certs
    networks:
      - database
    depends_on:
      - "mysql"

  api:
    command: npm run dev
    build: api
    environment:
      API_URL: "${API_URL}"
      API_HOSTNAME: "${API_HOSTNAME}"
      API_DATABASE_USER: "root"
      API_DATABASE_PASSWORD: "${MYSQL_PASSWORD}"
      API_DATABASE_DATABASE: "${API_DATABASE}"
      API_DATABASE_HOST: "${MYSQL_HOST}"
      API_EMAILADDRESS: "${API_EMAILADDRESS}"
      API_EXPRESS_PORT: "${API_PORT}"
      API_MAIL_FROM: "${API_MAIL_FROM}"
      API_MAIL_TRANSPORT_SMTP_PORT: "${MAIL_TRANSPORT_SMTP_PORT}"
      API_MAIL_TRANSPORT_SMTP_HOST: "${MAIL_TRANSPORT_SMTP_HOST}"
      API_MAIL_TRANSPORT_SMTP_REQUIRESSL: "${MAIL_TRANSPORT_SMTP_REQUIRESSL}"
      API_MAIL_TRANSPORT_SMTP_AUTH_USER: "${MAIL_TRANSPORT_SMTP_AUTH_USER}"
      API_MAIL_TRANSPORT_SMTP_AUTH_PASS: "${MAIL_TRANSPORT_SMTP_AUTH_PASS}"
      API_NOTIFICATIONS_ADMIN_EMAILADDRESS: "${API_NOTIFICATIONS_ADMIN_EMAILADDRESS}"
      API_SECURITY_SESSIONS_COOKIENAME: "${API_SECURITY_SESSIONS_COOKIENAME}"
      API_SECURITY_SESSIONS_ONLYSECURE: "${API_SECURITY_SESSIONS_ONLYSECURE}"
      API_AUTHORIZATION_JWTSECRET: "${API_AUTHORIZATION_JWTSECRET}"
      API_AUTHORIZATION_FIXEDAUTHTOKENS: "${API_AUTHORIZATION_FIXEDAUTHTOKENS}"
      DEV_SITE_DOMAIN: "${API_MAIL_FROM}"
    expose:
      - 8111
    ports:
      - ${API_PORT}:${API_PORT}
    restart: unless-stopped
    volumes:
        - ./api/src:/app/src
    networks:
      - database
    depends_on:
      - "mysql"

  frontend:
    command: npm run dev
    build: frontend
    ports:
      - ${FRONTED_PORT}:${FRONTED_PORT}
    volumes:
       - ./frontend:/frontend
    #  - ./frontend/data:/app/data
  #    - ./frontend/public/uploads:/app/public/uploads

    environment:
      PORT: "${FRONTED_PORT}"
      MONGODB_PORT_27017_TCP_ADDR: "${FRONTEND_MONGO_DB_HOST}"
      MONGODB_PORT_27017_TCP_PORT: "${FRONTEND_MONGO_PORT}"
      MONGO_DB_HOST: "${FRONTEND_MONGO_DB_HOST}"
      APOS_ALWAYS_COPY_ASSETS: '1'
      APOS_WORKFLOW: "${FRONTEND_APOS_WORKFLOW}"
      DEFAULT_DB: "${FRONTED_DEFAULT_MONGO_DB}"
      IMAGE_API_URL: "${IMAGE_APP_URL}"
      IMAGE_API_ACCESS_TOKEN: "${IMAGE_API_ACCESS_TOKEN}"
      API: "${FRONTEND_API_URL}"
      SESSION_SECRET: "${SESSION_SECRET}"
      SITE_API_KEY: "${FRONTEND_SITE_API_KEY}"
      APOS_WORKFLOW: "${FRONTEND_APOS_WORKFLOW}"
      LOGIN_CSM_BASIC_AUTH_USER: "${FRONTEND_LOGIN_CSM_BASIC_AUTH_USER}"
      LOGIN_CSM_BASIC_AUTH_PASSWORD: "${FRONTEND_LOGIN_CSM_BASIC_AUTH_PASSWORD}"
      MINIFY_JS: "${FRONTEND_MINIFY_JS}"
      COOKIE_SECURE_OFF: "${COOKIE_SECURE_OFF}"
    restart: always
    volumes:
      - ./auth:/srv/openstad/
      - /srv/openstad/node_modules
      - /srv/openstad/certs
    networks:
      - database
    links:
      - mongo:localhost
      - api:api
    depends_on:
      - api
      - mongo
      - image
      - auth

  mongo:
    image: 'mongo:latest'
    volumes:
      - 'mongo:/data/db'
    ports:
      - '127.0.0.1:27018:27017'
    restart: always
    networks:
      - database
#
# Volumes section
# Volumes:
# - database: A volume that contains everything that is stored in the MySQL database.
#
volumes:
  database:
  mongo:

#
# Networks section
# Networks:
# - database, represents the isolated network between the server and the database.
networks:
  database:
...
